import sys
import string
n = int(sys.argv[1])
print(f'generating local_content.h of length {n}')

with open("local_content_gen_lorem.txt") as f:
    s = f.read()
    yes_chars = set(string.ascii_letters+" ,;")
    s = [x for x in s if x in yes_chars]
    s = "".join(s)

while len(s) < n:
    s = s + s

s_pub = "x" * n
while len(s) < n:
    s = s + s
s_priv = s[:n]
    

content = f"""
/* generated by running `local_content_gen.py {n}` */

#ifndef DEMOS_LOCAL_CONTENT_H_
#define DEMOS_LOCAL_CONTENT_H_

// Generic strings used across examples. The public_data is intended to be
// accessed in the C++ execution model. The content of the private_data is
// intended to be leaked outside of the C++ execution model using sidechannels.
// Concrete sidechannel is dependent on the concrete vulnerability that we are
// demonstrating.
const char *public_data = "{s_pub}";

const char *private_data = "{s_priv}";

#endif  // DEMOS_LOCAL_CONTENT_H_
"""
with open("local_content.h", 'w') as f:
    f.write(content)